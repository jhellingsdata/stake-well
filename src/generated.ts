// Generated by @wagmi/cli@1.3.0 on 8/22/2023 at 2:41:04 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  Address,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Mock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20MockABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'currentAllowance', internalType: 'uint256', type: 'uint256' },
      { name: 'requestedDecrease', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC20FailedDecreaseAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'allowance', internalType: 'uint256', type: 'uint256' },
      { name: 'needed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC20InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
      { name: 'needed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC20InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'spender', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidSpender',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'requestedDecrease', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IterableMapping
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iterableMappingABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'inserted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC677Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc677ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_sender', internalType: 'address', type: 'address' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onTokenTransfer',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LinkToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const linkTokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'transferAndCall',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LinkTokenInterface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const linkTokenInterfaceABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: 'remaining', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: 'decimalPlaces', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseApproval',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseApproval',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: 'tokenName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: 'tokenSymbol', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [
      { name: 'totalTokensIssued', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'transferAndCall',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Raffle
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const raffleABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pickWinner',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RafflePool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export const rafflePoolABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'steth', internalType: 'address', type: 'address' },
      { name: 'interval', internalType: 'uint256', type: 'uint256' },
      { name: 'vrfCoordinatorV2', internalType: 'address', type: 'address' },
      { name: 'gasLane', internalType: 'bytes32', type: 'bytes32' },
      { name: 'subscriptionId', internalType: 'uint64', type: 'uint64' },
      { name: 'callbackGasLimit', internalType: 'uint32', type: 'uint32' },
      { name: 'numWords', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'have', internalType: 'address', type: 'address' },
      { name: 'want', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyCoordinatorCanFulfill',
  },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'OwnableInvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'OwnableUnauthorizedAccount',
  },
  { type: 'error', inputs: [], name: 'RafflePool__InsufficientAllowance' },
  { type: 'error', inputs: [], name: 'RafflePool__InsufficientStEthBalance' },
  { type: 'error', inputs: [], name: 'RafflePool__MintFailed' },
  { type: 'error', inputs: [], name: 'RafflePool__NeedsMoreThanZero' },
  { type: 'error', inputs: [], name: 'RafflePool__StEthTransferFailed' },
  {
    type: 'error',
    inputs: [
      { name: 'raffleBalance', internalType: 'uint256', type: 'uint256' },
      { name: 'raffleState', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'RafflePool__UpkeepNotNeeded',
  },
  { type: 'error', inputs: [], name: 'RafflePool__WithdrawalFailed' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'depositor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MintAndDepositSuccessful',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'winner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PickedWinner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RequestedRaffleWinner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newRewardsTotal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakingRewardsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'withdrawer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawSuccessful',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'userAddress', internalType: 'address', type: 'address' },
      { name: 's_startTime', internalType: 'uint256', type: 'uint256' },
      { name: 's_endTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'calculateTwab',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'checkUpkeep',
    outputs: [
      { name: 'upkeepNeeded', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'depositEth',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'depositStEth',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'depositStEthWithPermit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getActiveDepositors',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getActiveDepositorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRaffleState',
    outputs: [
      { name: '', internalType: 'enum RafflePool.RaffleState', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRecentWinner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getStakingRewardsTotal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalBalanceLog',
    outputs: [
      {
        name: '',
        internalType: 'struct RafflePool.BalanceLog[]',
        type: 'tuple[]',
        components: [
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalUserDeposits',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getUserBalanceLog',
    outputs: [
      {
        name: '',
        internalType: 'struct RafflePool.BalanceLog[]',
        type: 'tuple[]',
        components: [
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getUserDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'i_stETH',
    outputs: [
      { name: '', internalType: 'contract IERC20Permit', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'performUpkeep',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pickWinner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint256', type: 'uint256' },
      { name: 'randomWords', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'rawFulfillRandomWords',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'updateStakingRewards',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawStEth',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export const rafflePoolAddress = {
  5: '0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export const rafflePoolConfig = {
  address: rafflePoolAddress,
  abi: rafflePoolABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'OwnableInvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'OwnableUnauthorizedAccount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestRafflePool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testRafflePoolABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'steth', internalType: 'address', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'RafflePool__InsufficientAllowance' },
  { type: 'error', inputs: [], name: 'RafflePool__InsufficientStEthBalance' },
  { type: 'error', inputs: [], name: 'RafflePool__MintFailed' },
  { type: 'error', inputs: [], name: 'RafflePool__NeedsMoreThanZero' },
  { type: 'error', inputs: [], name: 'RafflePool__StEthTransferFailed' },
  { type: 'error', inputs: [], name: 'RafflePool__WithdrawalFailed' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'depositor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MintAndDepositSuccessful',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newRewardsTotal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakingRewardsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'withdrawer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawSuccessful',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'userAddress', internalType: 'address', type: 'address' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'endTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'calculateTwab',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'depositEth',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'depositStEth',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'depositStEthWithPermit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getActiveDepositors',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getActiveDepositorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getStakingRewardsTotal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalBalanceLog',
    outputs: [
      {
        name: '',
        internalType: 'struct TestRafflePool.BalanceLog[]',
        type: 'tuple[]',
        components: [
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalUserDeposits',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getUserBalanceLog',
    outputs: [
      {
        name: '',
        internalType: 'struct TestRafflePool.BalanceLog[]',
        type: 'tuple[]',
        components: [
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'getUserDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'updateStakingRewards',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawStEth',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StakePool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export const stakePoolABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_stETH', internalType: 'address', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'StakePool__InsufficientStEthBalance' },
  { type: 'error', inputs: [], name: 'StakePool__MintFailed' },
  { type: 'error', inputs: [], name: 'StakePool__NeedsMoreThanZero' },
  { type: 'error', inputs: [], name: 'StakePool__TransferFailed' },
  { type: 'error', inputs: [], name: 'StakePool__WithdrawalFailed' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'MintAndStakeDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'StakeDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'StakeDepositedWithPermit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'StakeWithdrawn',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'depositEth',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountStEth', internalType: 'uint256', type: 'uint256' }],
    name: 'depositStEth',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amountStEth', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'depositStEthWithPermit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'i_stETH',
    outputs: [
      { name: '', internalType: 'contract IERC20Permit', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 's_stakingRewardsTotal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 's_totalUserDeposits',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalUserDeposits',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawEth',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawStEth',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export const stakePoolAddress = {
  5: '0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D',
} as const

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export const stakePoolConfig = {
  address: stakePoolAddress,
  abi: stakePoolABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VRFConsumerBaseV2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vrfConsumerBaseV2ABI = [
  {
    type: 'error',
    inputs: [
      { name: 'have', internalType: 'address', type: 'address' },
      { name: 'want', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyCoordinatorCanFulfill',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint256', type: 'uint256' },
      { name: 'randomWords', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'rawFulfillRandomWords',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VRFCoordinatorV2Interface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vrfCoordinatorV2InterfaceABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'subId', internalType: 'uint64', type: 'uint64' }],
    name: 'acceptSubscriptionOwnerTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'subId', internalType: 'uint64', type: 'uint64' },
      { name: 'consumer', internalType: 'address', type: 'address' },
    ],
    name: 'addConsumer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'subId', internalType: 'uint64', type: 'uint64' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'cancelSubscription',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createSubscription',
    outputs: [{ name: 'subId', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRequestConfig',
    outputs: [
      { name: '', internalType: 'uint16', type: 'uint16' },
      { name: '', internalType: 'uint32', type: 'uint32' },
      { name: '', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'subId', internalType: 'uint64', type: 'uint64' }],
    name: 'getSubscription',
    outputs: [
      { name: 'balance', internalType: 'uint96', type: 'uint96' },
      { name: 'reqCount', internalType: 'uint64', type: 'uint64' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'consumers', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'subId', internalType: 'uint64', type: 'uint64' }],
    name: 'pendingRequestExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'subId', internalType: 'uint64', type: 'uint64' },
      { name: 'consumer', internalType: 'address', type: 'address' },
    ],
    name: 'removeConsumer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'keyHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'subId', internalType: 'uint64', type: 'uint64' },
      {
        name: 'minimumRequestConfirmations',
        internalType: 'uint16',
        type: 'uint16',
      },
      { name: 'callbackGasLimit', internalType: 'uint32', type: 'uint32' },
      { name: 'numWords', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'requestRandomWords',
    outputs: [{ name: 'requestId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'subId', internalType: 'uint64', type: 'uint64' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'requestSubscriptionOwnerTransfer',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Errors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ErrorsABI = [
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
      { name: 'needed', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC1155InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC1155InvalidApprover',
  },
  {
    type: 'error',
    inputs: [
      { name: 'idsLength', internalType: 'uint256', type: 'uint256' },
      { name: 'valuesLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC1155InvalidArrayLength',
  },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'ERC1155InvalidOperator',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC1155InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC1155InvalidSender',
  },
  {
    type: 'error',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'ERC1155MissingApprovalForAll',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Errors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ErrorsABI = [
  {
    type: 'error',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'allowance', internalType: 'uint256', type: 'uint256' },
      { name: 'needed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC20InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
      { name: 'needed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC20InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'spender', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidSpender',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Errors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ErrorsABI = [
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'ERC721IncorrectOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC721InsufficientApproval',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOperator',
  },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ERC721NonexistentToken',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20MockRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20MockAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20MockBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20MockDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"name"`.
 */
export function useErc20MockName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20MockSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20MockTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20MockWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20MockABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, TFunctionName, TMode>({
    abi: erc20MockABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20MockApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20MockABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'approve', TMode>({
    abi: erc20MockABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20MockBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof erc20MockABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'burn', TMode>({
    abi: erc20MockABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20MockDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20MockABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'decreaseAllowance', TMode>({
    abi: erc20MockABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20MockIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20MockABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'increaseAllowance', TMode>({
    abi: erc20MockABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"mint"`.
 */
export function useErc20MockMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof erc20MockABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'mint', TMode>({
    abi: erc20MockABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20MockTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20MockABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'transfer', TMode>({
    abi: erc20MockABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20MockTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20MockABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'transferFrom', TMode>({
    abi: erc20MockABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function usePrepareErc20MockWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20MockApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20MockBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20MockDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20MockIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareErc20MockMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20MockTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20MockTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20MockEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20MockABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MockABI,
    ...config,
  } as UseContractEventConfig<typeof erc20MockABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MockABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20MockApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20MockABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MockABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20MockABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MockABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20MockTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20MockABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MockABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20MockABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'approve', TMode>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transfer', TMode>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transferFrom', TMode>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, TFunctionName, TMode>({
    abi: ierc20MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'approve', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transfer', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc20MetadataABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transferFrom', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20PermitAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20PermitBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20PermitTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20PermitABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20PermitABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, TFunctionName, TMode>({
    abi: ierc20PermitABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20PermitApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20PermitABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, 'approve', TMode>({
    abi: ierc20PermitABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof ierc20PermitABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, 'permit', TMode>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20PermitTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20PermitABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, 'transfer', TMode>({
    abi: ierc20PermitABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20PermitTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20PermitABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20PermitABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20PermitABI, 'transferFrom', TMode>({
    abi: ierc20PermitABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20PermitApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20PermitTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20PermitTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20PermitABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20PermitABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20PermitABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20PermitABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20PermitApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20PermitABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20PermitABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20PermitABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20PermitABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20PermitTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20PermitABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20PermitABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20PermitABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iterableMappingABI}__.
 */
export function useIterableMappingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iterableMappingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iterableMappingABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iterableMappingABI,
    ...config,
  } as UseContractReadConfig<
    typeof iterableMappingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iterableMappingABI}__ and `functionName` set to `"balances"`.
 */
export function useIterableMappingBalances<
  TFunctionName extends 'balances',
  TSelectData = ReadContractResult<typeof iterableMappingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iterableMappingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iterableMappingABI,
    functionName: 'balances',
    ...config,
  } as UseContractReadConfig<
    typeof iterableMappingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iterableMappingABI}__ and `functionName` set to `"inserted"`.
 */
export function useIterableMappingInserted<
  TFunctionName extends 'inserted',
  TSelectData = ReadContractResult<typeof iterableMappingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iterableMappingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iterableMappingABI,
    functionName: 'inserted',
    ...config,
  } as UseContractReadConfig<
    typeof iterableMappingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc677ReceiverABI}__.
 */
export function useErc677ReceiverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc677ReceiverABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc677ReceiverABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc677ReceiverABI, TFunctionName, TMode>({
    abi: erc677ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc677ReceiverABI}__ and `functionName` set to `"onTokenTransfer"`.
 */
export function useErc677ReceiverOnTokenTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc677ReceiverABI,
          'onTokenTransfer'
        >['request']['abi'],
        'onTokenTransfer',
        TMode
      > & { functionName?: 'onTokenTransfer' }
    : UseContractWriteConfig<
        typeof erc677ReceiverABI,
        'onTokenTransfer',
        TMode
      > & {
        abi?: never
        functionName?: 'onTokenTransfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc677ReceiverABI, 'onTokenTransfer', TMode>({
    abi: erc677ReceiverABI,
    functionName: 'onTokenTransfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc677ReceiverABI}__.
 */
export function usePrepareErc677ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc677ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc677ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc677ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc677ReceiverABI}__ and `functionName` set to `"onTokenTransfer"`.
 */
export function usePrepareErc677ReceiverOnTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc677ReceiverABI, 'onTokenTransfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc677ReceiverABI,
    functionName: 'onTokenTransfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc677ReceiverABI,
    'onTokenTransfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenABI}__.
 */
export function useLinkTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof linkTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenABI,
    ...config,
  } as UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useLinkTokenDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof linkTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useLinkTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof linkTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useLinkTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof linkTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useLinkTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof linkTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"name"`.
 */
export function useLinkTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof linkTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"nonces"`.
 */
export function useLinkTokenNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof linkTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useLinkTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof linkTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useLinkTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof linkTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof linkTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenABI}__.
 */
export function useLinkTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof linkTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof linkTokenABI, TFunctionName, TMode>({
    abi: linkTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useLinkTokenApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof linkTokenABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof linkTokenABI, 'approve', TMode>({
    abi: linkTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"permit"`.
 */
export function useLinkTokenPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof linkTokenABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof linkTokenABI, 'permit', TMode>({
    abi: linkTokenABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useLinkTokenTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof linkTokenABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof linkTokenABI, 'transfer', TMode>({
    abi: linkTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"transferAndCall"`.
 */
export function useLinkTokenTransferAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenABI,
          'transferAndCall'
        >['request']['abi'],
        'transferAndCall',
        TMode
      > & { functionName?: 'transferAndCall' }
    : UseContractWriteConfig<typeof linkTokenABI, 'transferAndCall', TMode> & {
        abi?: never
        functionName?: 'transferAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof linkTokenABI, 'transferAndCall', TMode>({
    abi: linkTokenABI,
    functionName: 'transferAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useLinkTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof linkTokenABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof linkTokenABI, 'transferFrom', TMode>({
    abi: linkTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenABI}__.
 */
export function usePrepareLinkTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof linkTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof linkTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareLinkTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof linkTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof linkTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareLinkTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof linkTokenABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof linkTokenABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareLinkTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof linkTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof linkTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"transferAndCall"`.
 */
export function usePrepareLinkTokenTransferAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof linkTokenABI, 'transferAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenABI,
    functionName: 'transferAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof linkTokenABI, 'transferAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareLinkTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof linkTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof linkTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link linkTokenABI}__.
 */
export function useLinkTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof linkTokenABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: linkTokenABI,
    ...config,
  } as UseContractEventConfig<typeof linkTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link linkTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useLinkTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof linkTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: linkTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof linkTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link linkTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useLinkTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof linkTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: linkTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof linkTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenInterfaceABI}__.
 */
export function useLinkTokenInterfaceRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof linkTokenInterfaceABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof linkTokenInterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenInterfaceABI,
    ...config,
  } as UseContractReadConfig<
    typeof linkTokenInterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"allowance"`.
 */
export function useLinkTokenInterfaceAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof linkTokenInterfaceABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof linkTokenInterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenInterfaceABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof linkTokenInterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useLinkTokenInterfaceBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof linkTokenInterfaceABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof linkTokenInterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenInterfaceABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof linkTokenInterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"decimals"`.
 */
export function useLinkTokenInterfaceDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof linkTokenInterfaceABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof linkTokenInterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenInterfaceABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof linkTokenInterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"name"`.
 */
export function useLinkTokenInterfaceName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof linkTokenInterfaceABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof linkTokenInterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenInterfaceABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof linkTokenInterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"symbol"`.
 */
export function useLinkTokenInterfaceSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof linkTokenInterfaceABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof linkTokenInterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenInterfaceABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof linkTokenInterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useLinkTokenInterfaceTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof linkTokenInterfaceABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof linkTokenInterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: linkTokenInterfaceABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof linkTokenInterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__.
 */
export function useLinkTokenInterfaceWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenInterfaceABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof linkTokenInterfaceABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof linkTokenInterfaceABI, TFunctionName, TMode>({
    abi: linkTokenInterfaceABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"approve"`.
 */
export function useLinkTokenInterfaceApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenInterfaceABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof linkTokenInterfaceABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof linkTokenInterfaceABI, 'approve', TMode>({
    abi: linkTokenInterfaceABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"decreaseApproval"`.
 */
export function useLinkTokenInterfaceDecreaseApproval<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenInterfaceABI,
          'decreaseApproval'
        >['request']['abi'],
        'decreaseApproval',
        TMode
      > & { functionName?: 'decreaseApproval' }
    : UseContractWriteConfig<
        typeof linkTokenInterfaceABI,
        'decreaseApproval',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseApproval'
      } = {} as any,
) {
  return useContractWrite<
    typeof linkTokenInterfaceABI,
    'decreaseApproval',
    TMode
  >({
    abi: linkTokenInterfaceABI,
    functionName: 'decreaseApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"increaseApproval"`.
 */
export function useLinkTokenInterfaceIncreaseApproval<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenInterfaceABI,
          'increaseApproval'
        >['request']['abi'],
        'increaseApproval',
        TMode
      > & { functionName?: 'increaseApproval' }
    : UseContractWriteConfig<
        typeof linkTokenInterfaceABI,
        'increaseApproval',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseApproval'
      } = {} as any,
) {
  return useContractWrite<
    typeof linkTokenInterfaceABI,
    'increaseApproval',
    TMode
  >({
    abi: linkTokenInterfaceABI,
    functionName: 'increaseApproval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"transfer"`.
 */
export function useLinkTokenInterfaceTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenInterfaceABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        typeof linkTokenInterfaceABI,
        'transfer',
        TMode
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof linkTokenInterfaceABI, 'transfer', TMode>({
    abi: linkTokenInterfaceABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"transferAndCall"`.
 */
export function useLinkTokenInterfaceTransferAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenInterfaceABI,
          'transferAndCall'
        >['request']['abi'],
        'transferAndCall',
        TMode
      > & { functionName?: 'transferAndCall' }
    : UseContractWriteConfig<
        typeof linkTokenInterfaceABI,
        'transferAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'transferAndCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof linkTokenInterfaceABI,
    'transferAndCall',
    TMode
  >({
    abi: linkTokenInterfaceABI,
    functionName: 'transferAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useLinkTokenInterfaceTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof linkTokenInterfaceABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof linkTokenInterfaceABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof linkTokenInterfaceABI, 'transferFrom', TMode>({
    abi: linkTokenInterfaceABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__.
 */
export function usePrepareLinkTokenInterfaceWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof linkTokenInterfaceABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenInterfaceABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof linkTokenInterfaceABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareLinkTokenInterfaceApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof linkTokenInterfaceABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenInterfaceABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof linkTokenInterfaceABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"decreaseApproval"`.
 */
export function usePrepareLinkTokenInterfaceDecreaseApproval(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof linkTokenInterfaceABI,
      'decreaseApproval'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenInterfaceABI,
    functionName: 'decreaseApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof linkTokenInterfaceABI,
    'decreaseApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"increaseApproval"`.
 */
export function usePrepareLinkTokenInterfaceIncreaseApproval(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof linkTokenInterfaceABI,
      'increaseApproval'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenInterfaceABI,
    functionName: 'increaseApproval',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof linkTokenInterfaceABI,
    'increaseApproval'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareLinkTokenInterfaceTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof linkTokenInterfaceABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenInterfaceABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof linkTokenInterfaceABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"transferAndCall"`.
 */
export function usePrepareLinkTokenInterfaceTransferAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof linkTokenInterfaceABI,
      'transferAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenInterfaceABI,
    functionName: 'transferAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof linkTokenInterfaceABI,
    'transferAndCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link linkTokenInterfaceABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareLinkTokenInterfaceTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof linkTokenInterfaceABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: linkTokenInterfaceABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof linkTokenInterfaceABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link raffleABI}__.
 */
export function useRaffleWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof raffleABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof raffleABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof raffleABI, TFunctionName, TMode>({
    abi: raffleABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link raffleABI}__ and `functionName` set to `"pickWinner"`.
 */
export function useRafflePickWinner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof raffleABI,
          'pickWinner'
        >['request']['abi'],
        'pickWinner',
        TMode
      > & { functionName?: 'pickWinner' }
    : UseContractWriteConfig<typeof raffleABI, 'pickWinner', TMode> & {
        abi?: never
        functionName?: 'pickWinner'
      } = {} as any,
) {
  return useContractWrite<typeof raffleABI, 'pickWinner', TMode>({
    abi: raffleABI,
    functionName: 'pickWinner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link raffleABI}__.
 */
export function usePrepareRaffleWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof raffleABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: raffleABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof raffleABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link raffleABI}__ and `functionName` set to `"pickWinner"`.
 */
export function usePrepareRafflePickWinner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof raffleABI, 'pickWinner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: raffleABI,
    functionName: 'pickWinner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof raffleABI, 'pickWinner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"calculateTwab"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolCalculateTwab<
  TFunctionName extends 'calculateTwab',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'calculateTwab',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"checkUpkeep"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolCheckUpkeep<
  TFunctionName extends 'checkUpkeep',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'checkUpkeep',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"getActiveDepositors"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolGetActiveDepositors<
  TFunctionName extends 'getActiveDepositors',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'getActiveDepositors',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"getActiveDepositorsCount"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolGetActiveDepositorsCount<
  TFunctionName extends 'getActiveDepositorsCount',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'getActiveDepositorsCount',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"getRaffleState"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolGetRaffleState<
  TFunctionName extends 'getRaffleState',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'getRaffleState',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"getRecentWinner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolGetRecentWinner<
  TFunctionName extends 'getRecentWinner',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'getRecentWinner',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"getStakingRewardsTotal"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolGetStakingRewardsTotal<
  TFunctionName extends 'getStakingRewardsTotal',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'getStakingRewardsTotal',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"getTotalBalance"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolGetTotalBalance<
  TFunctionName extends 'getTotalBalance',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'getTotalBalance',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"getTotalBalanceLog"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolGetTotalBalanceLog<
  TFunctionName extends 'getTotalBalanceLog',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'getTotalBalanceLog',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"getTotalUserDeposits"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolGetTotalUserDeposits<
  TFunctionName extends 'getTotalUserDeposits',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'getTotalUserDeposits',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"getUserBalanceLog"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolGetUserBalanceLog<
  TFunctionName extends 'getUserBalanceLog',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'getUserBalanceLog',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"getUserDeposit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolGetUserDeposit<
  TFunctionName extends 'getUserDeposit',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'getUserDeposit',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"i_stETH"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolIStEth<
  TFunctionName extends 'i_stETH',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'i_stETH',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof rafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof rafflePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof rafflePoolABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof rafflePoolABI, TFunctionName, TMode>({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"depositEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolDepositEth<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          'depositEth'
        >['request']['abi'],
        'depositEth',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'depositEth' }
    : UseContractWriteConfig<typeof rafflePoolABI, 'depositEth', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'depositEth'
      } = {} as any,
) {
  return useContractWrite<typeof rafflePoolABI, 'depositEth', TMode>({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'depositEth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"depositStEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolDepositStEth<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          'depositStEth'
        >['request']['abi'],
        'depositStEth',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'depositStEth'
      }
    : UseContractWriteConfig<typeof rafflePoolABI, 'depositStEth', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'depositStEth'
      } = {} as any,
) {
  return useContractWrite<typeof rafflePoolABI, 'depositStEth', TMode>({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'depositStEth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"depositStEthWithPermit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolDepositStEthWithPermit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          'depositStEthWithPermit'
        >['request']['abi'],
        'depositStEthWithPermit',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'depositStEthWithPermit'
      }
    : UseContractWriteConfig<
        typeof rafflePoolABI,
        'depositStEthWithPermit',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'depositStEthWithPermit'
      } = {} as any,
) {
  return useContractWrite<
    typeof rafflePoolABI,
    'depositStEthWithPermit',
    TMode
  >({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'depositStEthWithPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"performUpkeep"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolPerformUpkeep<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          'performUpkeep'
        >['request']['abi'],
        'performUpkeep',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'performUpkeep'
      }
    : UseContractWriteConfig<typeof rafflePoolABI, 'performUpkeep', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'performUpkeep'
      } = {} as any,
) {
  return useContractWrite<typeof rafflePoolABI, 'performUpkeep', TMode>({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'performUpkeep',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"pickWinner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolPickWinner<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          'pickWinner'
        >['request']['abi'],
        'pickWinner',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pickWinner' }
    : UseContractWriteConfig<typeof rafflePoolABI, 'pickWinner', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pickWinner'
      } = {} as any,
) {
  return useContractWrite<typeof rafflePoolABI, 'pickWinner', TMode>({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'pickWinner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"rawFulfillRandomWords"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolRawFulfillRandomWords<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          'rawFulfillRandomWords'
        >['request']['abi'],
        'rawFulfillRandomWords',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'rawFulfillRandomWords'
      }
    : UseContractWriteConfig<
        typeof rafflePoolABI,
        'rawFulfillRandomWords',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'rawFulfillRandomWords'
      } = {} as any,
) {
  return useContractWrite<typeof rafflePoolABI, 'rawFulfillRandomWords', TMode>(
    {
      abi: rafflePoolABI,
      address: rafflePoolAddress[5],
      functionName: 'rawFulfillRandomWords',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        typeof rafflePoolABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof rafflePoolABI, 'renounceOwnership', TMode>({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        typeof rafflePoolABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof rafflePoolABI, 'transferOwnership', TMode>({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"updateStakingRewards"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolUpdateStakingRewards<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          'updateStakingRewards'
        >['request']['abi'],
        'updateStakingRewards',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'updateStakingRewards'
      }
    : UseContractWriteConfig<
        typeof rafflePoolABI,
        'updateStakingRewards',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'updateStakingRewards'
      } = {} as any,
) {
  return useContractWrite<typeof rafflePoolABI, 'updateStakingRewards', TMode>({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'updateStakingRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"withdrawStEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolWithdrawStEth<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof rafflePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof rafflePoolABI,
          'withdrawStEth'
        >['request']['abi'],
        'withdrawStEth',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'withdrawStEth'
      }
    : UseContractWriteConfig<typeof rafflePoolABI, 'withdrawStEth', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdrawStEth'
      } = {} as any,
) {
  return useContractWrite<typeof rafflePoolABI, 'withdrawStEth', TMode>({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'withdrawStEth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rafflePoolABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof rafflePoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"depositEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolDepositEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rafflePoolABI, 'depositEth'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'depositEth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rafflePoolABI, 'depositEth'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"depositStEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolDepositStEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rafflePoolABI, 'depositStEth'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'depositStEth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rafflePoolABI, 'depositStEth'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"depositStEthWithPermit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolDepositStEthWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rafflePoolABI,
      'depositStEthWithPermit'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'depositStEthWithPermit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rafflePoolABI,
    'depositStEthWithPermit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"performUpkeep"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolPerformUpkeep(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rafflePoolABI, 'performUpkeep'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'performUpkeep',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rafflePoolABI, 'performUpkeep'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"pickWinner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolPickWinner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rafflePoolABI, 'pickWinner'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'pickWinner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rafflePoolABI, 'pickWinner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"rawFulfillRandomWords"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolRawFulfillRandomWords(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof rafflePoolABI,
      'rawFulfillRandomWords'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'rawFulfillRandomWords',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rafflePoolABI,
    'rawFulfillRandomWords'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rafflePoolABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rafflePoolABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rafflePoolABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rafflePoolABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"updateStakingRewards"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolUpdateStakingRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rafflePoolABI, 'updateStakingRewards'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'updateStakingRewards',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof rafflePoolABI,
    'updateStakingRewards'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rafflePoolABI}__ and `functionName` set to `"withdrawStEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function usePrepareRafflePoolWithdrawStEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof rafflePoolABI, 'withdrawStEth'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    functionName: 'withdrawStEth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof rafflePoolABI, 'withdrawStEth'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rafflePoolABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof rafflePoolABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    ...config,
  } as UseContractEventConfig<typeof rafflePoolABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rafflePoolABI}__ and `eventName` set to `"MintAndDepositSuccessful"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolMintAndDepositSuccessfulEvent(
  config: Omit<
    UseContractEventConfig<typeof rafflePoolABI, 'MintAndDepositSuccessful'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    eventName: 'MintAndDepositSuccessful',
    ...config,
  } as UseContractEventConfig<typeof rafflePoolABI, 'MintAndDepositSuccessful'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rafflePoolABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof rafflePoolABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof rafflePoolABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rafflePoolABI}__ and `eventName` set to `"PickedWinner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolPickedWinnerEvent(
  config: Omit<
    UseContractEventConfig<typeof rafflePoolABI, 'PickedWinner'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    eventName: 'PickedWinner',
    ...config,
  } as UseContractEventConfig<typeof rafflePoolABI, 'PickedWinner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rafflePoolABI}__ and `eventName` set to `"RequestedRaffleWinner"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolRequestedRaffleWinnerEvent(
  config: Omit<
    UseContractEventConfig<typeof rafflePoolABI, 'RequestedRaffleWinner'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    eventName: 'RequestedRaffleWinner',
    ...config,
  } as UseContractEventConfig<typeof rafflePoolABI, 'RequestedRaffleWinner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rafflePoolABI}__ and `eventName` set to `"StakingRewardsUpdated"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolStakingRewardsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof rafflePoolABI, 'StakingRewardsUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    eventName: 'StakingRewardsUpdated',
    ...config,
  } as UseContractEventConfig<typeof rafflePoolABI, 'StakingRewardsUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link rafflePoolABI}__ and `eventName` set to `"WithdrawSuccessful"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xc797FcFD56152b5cDF16C87284eE3922cdfB1A5A)
 */
export function useRafflePoolWithdrawSuccessfulEvent(
  config: Omit<
    UseContractEventConfig<typeof rafflePoolABI, 'WithdrawSuccessful'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof rafflePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: rafflePoolABI,
    address: rafflePoolAddress[5],
    eventName: 'WithdrawSuccessful',
    ...config,
  } as UseContractEventConfig<typeof rafflePoolABI, 'WithdrawSuccessful'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testRafflePoolABI}__.
 */
export function useTestRafflePoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof testRafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testRafflePoolABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: testRafflePoolABI,
    ...config,
  } as UseContractReadConfig<
    typeof testRafflePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"calculateTwab"`.
 */
export function useTestRafflePoolCalculateTwab<
  TFunctionName extends 'calculateTwab',
  TSelectData = ReadContractResult<typeof testRafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testRafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testRafflePoolABI,
    functionName: 'calculateTwab',
    ...config,
  } as UseContractReadConfig<
    typeof testRafflePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"getActiveDepositors"`.
 */
export function useTestRafflePoolGetActiveDepositors<
  TFunctionName extends 'getActiveDepositors',
  TSelectData = ReadContractResult<typeof testRafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testRafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testRafflePoolABI,
    functionName: 'getActiveDepositors',
    ...config,
  } as UseContractReadConfig<
    typeof testRafflePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"getActiveDepositorsCount"`.
 */
export function useTestRafflePoolGetActiveDepositorsCount<
  TFunctionName extends 'getActiveDepositorsCount',
  TSelectData = ReadContractResult<typeof testRafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testRafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testRafflePoolABI,
    functionName: 'getActiveDepositorsCount',
    ...config,
  } as UseContractReadConfig<
    typeof testRafflePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"getStakingRewardsTotal"`.
 */
export function useTestRafflePoolGetStakingRewardsTotal<
  TFunctionName extends 'getStakingRewardsTotal',
  TSelectData = ReadContractResult<typeof testRafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testRafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testRafflePoolABI,
    functionName: 'getStakingRewardsTotal',
    ...config,
  } as UseContractReadConfig<
    typeof testRafflePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"getTotalBalance"`.
 */
export function useTestRafflePoolGetTotalBalance<
  TFunctionName extends 'getTotalBalance',
  TSelectData = ReadContractResult<typeof testRafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testRafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testRafflePoolABI,
    functionName: 'getTotalBalance',
    ...config,
  } as UseContractReadConfig<
    typeof testRafflePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"getTotalBalanceLog"`.
 */
export function useTestRafflePoolGetTotalBalanceLog<
  TFunctionName extends 'getTotalBalanceLog',
  TSelectData = ReadContractResult<typeof testRafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testRafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testRafflePoolABI,
    functionName: 'getTotalBalanceLog',
    ...config,
  } as UseContractReadConfig<
    typeof testRafflePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"getTotalUserDeposits"`.
 */
export function useTestRafflePoolGetTotalUserDeposits<
  TFunctionName extends 'getTotalUserDeposits',
  TSelectData = ReadContractResult<typeof testRafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testRafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testRafflePoolABI,
    functionName: 'getTotalUserDeposits',
    ...config,
  } as UseContractReadConfig<
    typeof testRafflePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"getUserBalanceLog"`.
 */
export function useTestRafflePoolGetUserBalanceLog<
  TFunctionName extends 'getUserBalanceLog',
  TSelectData = ReadContractResult<typeof testRafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testRafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testRafflePoolABI,
    functionName: 'getUserBalanceLog',
    ...config,
  } as UseContractReadConfig<
    typeof testRafflePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"getUserDeposit"`.
 */
export function useTestRafflePoolGetUserDeposit<
  TFunctionName extends 'getUserDeposit',
  TSelectData = ReadContractResult<typeof testRafflePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testRafflePoolABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testRafflePoolABI,
    functionName: 'getUserDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof testRafflePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__.
 */
export function useTestRafflePoolWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testRafflePoolABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof testRafflePoolABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof testRafflePoolABI, TFunctionName, TMode>({
    abi: testRafflePoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"depositEth"`.
 */
export function useTestRafflePoolDepositEth<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testRafflePoolABI,
          'depositEth'
        >['request']['abi'],
        'depositEth',
        TMode
      > & { functionName?: 'depositEth' }
    : UseContractWriteConfig<typeof testRafflePoolABI, 'depositEth', TMode> & {
        abi?: never
        functionName?: 'depositEth'
      } = {} as any,
) {
  return useContractWrite<typeof testRafflePoolABI, 'depositEth', TMode>({
    abi: testRafflePoolABI,
    functionName: 'depositEth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"depositStEth"`.
 */
export function useTestRafflePoolDepositStEth<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testRafflePoolABI,
          'depositStEth'
        >['request']['abi'],
        'depositStEth',
        TMode
      > & { functionName?: 'depositStEth' }
    : UseContractWriteConfig<
        typeof testRafflePoolABI,
        'depositStEth',
        TMode
      > & {
        abi?: never
        functionName?: 'depositStEth'
      } = {} as any,
) {
  return useContractWrite<typeof testRafflePoolABI, 'depositStEth', TMode>({
    abi: testRafflePoolABI,
    functionName: 'depositStEth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"depositStEthWithPermit"`.
 */
export function useTestRafflePoolDepositStEthWithPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testRafflePoolABI,
          'depositStEthWithPermit'
        >['request']['abi'],
        'depositStEthWithPermit',
        TMode
      > & { functionName?: 'depositStEthWithPermit' }
    : UseContractWriteConfig<
        typeof testRafflePoolABI,
        'depositStEthWithPermit',
        TMode
      > & {
        abi?: never
        functionName?: 'depositStEthWithPermit'
      } = {} as any,
) {
  return useContractWrite<
    typeof testRafflePoolABI,
    'depositStEthWithPermit',
    TMode
  >({
    abi: testRafflePoolABI,
    functionName: 'depositStEthWithPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"updateStakingRewards"`.
 */
export function useTestRafflePoolUpdateStakingRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testRafflePoolABI,
          'updateStakingRewards'
        >['request']['abi'],
        'updateStakingRewards',
        TMode
      > & { functionName?: 'updateStakingRewards' }
    : UseContractWriteConfig<
        typeof testRafflePoolABI,
        'updateStakingRewards',
        TMode
      > & {
        abi?: never
        functionName?: 'updateStakingRewards'
      } = {} as any,
) {
  return useContractWrite<
    typeof testRafflePoolABI,
    'updateStakingRewards',
    TMode
  >({
    abi: testRafflePoolABI,
    functionName: 'updateStakingRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"withdrawStEth"`.
 */
export function useTestRafflePoolWithdrawStEth<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testRafflePoolABI,
          'withdrawStEth'
        >['request']['abi'],
        'withdrawStEth',
        TMode
      > & { functionName?: 'withdrawStEth' }
    : UseContractWriteConfig<
        typeof testRafflePoolABI,
        'withdrawStEth',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawStEth'
      } = {} as any,
) {
  return useContractWrite<typeof testRafflePoolABI, 'withdrawStEth', TMode>({
    abi: testRafflePoolABI,
    functionName: 'withdrawStEth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__.
 */
export function usePrepareTestRafflePoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testRafflePoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testRafflePoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof testRafflePoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"depositEth"`.
 */
export function usePrepareTestRafflePoolDepositEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testRafflePoolABI, 'depositEth'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testRafflePoolABI,
    functionName: 'depositEth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testRafflePoolABI, 'depositEth'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"depositStEth"`.
 */
export function usePrepareTestRafflePoolDepositStEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testRafflePoolABI, 'depositStEth'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testRafflePoolABI,
    functionName: 'depositStEth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testRafflePoolABI, 'depositStEth'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"depositStEthWithPermit"`.
 */
export function usePrepareTestRafflePoolDepositStEthWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof testRafflePoolABI,
      'depositStEthWithPermit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testRafflePoolABI,
    functionName: 'depositStEthWithPermit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof testRafflePoolABI,
    'depositStEthWithPermit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"updateStakingRewards"`.
 */
export function usePrepareTestRafflePoolUpdateStakingRewards(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof testRafflePoolABI,
      'updateStakingRewards'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testRafflePoolABI,
    functionName: 'updateStakingRewards',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof testRafflePoolABI,
    'updateStakingRewards'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testRafflePoolABI}__ and `functionName` set to `"withdrawStEth"`.
 */
export function usePrepareTestRafflePoolWithdrawStEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testRafflePoolABI, 'withdrawStEth'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testRafflePoolABI,
    functionName: 'withdrawStEth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testRafflePoolABI, 'withdrawStEth'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testRafflePoolABI}__.
 */
export function useTestRafflePoolEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof testRafflePoolABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: testRafflePoolABI,
    ...config,
  } as UseContractEventConfig<typeof testRafflePoolABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testRafflePoolABI}__ and `eventName` set to `"MintAndDepositSuccessful"`.
 */
export function useTestRafflePoolMintAndDepositSuccessfulEvent(
  config: Omit<
    UseContractEventConfig<
      typeof testRafflePoolABI,
      'MintAndDepositSuccessful'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testRafflePoolABI,
    eventName: 'MintAndDepositSuccessful',
    ...config,
  } as UseContractEventConfig<
    typeof testRafflePoolABI,
    'MintAndDepositSuccessful'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testRafflePoolABI}__ and `eventName` set to `"StakingRewardsUpdated"`.
 */
export function useTestRafflePoolStakingRewardsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof testRafflePoolABI, 'StakingRewardsUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testRafflePoolABI,
    eventName: 'StakingRewardsUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof testRafflePoolABI,
    'StakingRewardsUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testRafflePoolABI}__ and `eventName` set to `"WithdrawSuccessful"`.
 */
export function useTestRafflePoolWithdrawSuccessfulEvent(
  config: Omit<
    UseContractEventConfig<typeof testRafflePoolABI, 'WithdrawSuccessful'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testRafflePoolABI,
    eventName: 'WithdrawSuccessful',
    ...config,
  } as UseContractEventConfig<typeof testRafflePoolABI, 'WithdrawSuccessful'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakePoolABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stakePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    ...config,
  } as UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof stakePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"i_stETH"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolIStEth<
  TFunctionName extends 'i_stETH',
  TSelectData = ReadContractResult<typeof stakePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'i_stETH',
    ...config,
  } as UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"s_stakingRewardsTotal"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolSStakingRewardsTotal<
  TFunctionName extends 's_stakingRewardsTotal',
  TSelectData = ReadContractResult<typeof stakePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 's_stakingRewardsTotal',
    ...config,
  } as UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"s_totalUserDeposits"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolSTotalUserDeposits<
  TFunctionName extends 's_totalUserDeposits',
  TSelectData = ReadContractResult<typeof stakePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 's_totalUserDeposits',
    ...config,
  } as UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"totalBalance"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolTotalBalance<
  TFunctionName extends 'totalBalance',
  TSelectData = ReadContractResult<typeof stakePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'totalBalance',
    ...config,
  } as UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"totalUserDeposits"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolTotalUserDeposits<
  TFunctionName extends 'totalUserDeposits',
  TSelectData = ReadContractResult<typeof stakePoolABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractRead({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'totalUserDeposits',
    ...config,
  } as UseContractReadConfig<typeof stakePoolABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakePoolABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof stakePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakePoolABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof stakePoolABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof stakePoolABI, TFunctionName, TMode>({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"depositEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolDepositEth<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof stakePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakePoolABI,
          'depositEth'
        >['request']['abi'],
        'depositEth',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'depositEth' }
    : UseContractWriteConfig<typeof stakePoolABI, 'depositEth', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'depositEth'
      } = {} as any,
) {
  return useContractWrite<typeof stakePoolABI, 'depositEth', TMode>({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'depositEth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"depositStEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolDepositStEth<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof stakePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakePoolABI,
          'depositStEth'
        >['request']['abi'],
        'depositStEth',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'depositStEth'
      }
    : UseContractWriteConfig<typeof stakePoolABI, 'depositStEth', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'depositStEth'
      } = {} as any,
) {
  return useContractWrite<typeof stakePoolABI, 'depositStEth', TMode>({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'depositStEth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"depositStEthWithPermit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolDepositStEthWithPermit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof stakePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakePoolABI,
          'depositStEthWithPermit'
        >['request']['abi'],
        'depositStEthWithPermit',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'depositStEthWithPermit'
      }
    : UseContractWriteConfig<
        typeof stakePoolABI,
        'depositStEthWithPermit',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'depositStEthWithPermit'
      } = {} as any,
) {
  return useContractWrite<typeof stakePoolABI, 'depositStEthWithPermit', TMode>(
    {
      abi: stakePoolABI,
      address: stakePoolAddress[5],
      functionName: 'depositStEthWithPermit',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"withdrawEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolWithdrawEth<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof stakePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakePoolABI,
          'withdrawEth'
        >['request']['abi'],
        'withdrawEth',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'withdrawEth'
      }
    : UseContractWriteConfig<typeof stakePoolABI, 'withdrawEth', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdrawEth'
      } = {} as any,
) {
  return useContractWrite<typeof stakePoolABI, 'withdrawEth', TMode>({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'withdrawEth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"withdrawStEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolWithdrawStEth<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof stakePoolAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stakePoolABI,
          'withdrawStEth'
        >['request']['abi'],
        'withdrawStEth',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'withdrawStEth'
      }
    : UseContractWriteConfig<typeof stakePoolABI, 'withdrawStEth', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdrawStEth'
      } = {} as any,
) {
  return useContractWrite<typeof stakePoolABI, 'withdrawStEth', TMode>({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'withdrawStEth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakePoolABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function usePrepareStakePoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakePoolABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakePoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"depositEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function usePrepareStakePoolDepositEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakePoolABI, 'depositEth'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'depositEth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakePoolABI, 'depositEth'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"depositStEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function usePrepareStakePoolDepositStEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakePoolABI, 'depositStEth'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'depositStEth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakePoolABI, 'depositStEth'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"depositStEthWithPermit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function usePrepareStakePoolDepositStEthWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof stakePoolABI,
      'depositStEthWithPermit'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'depositStEthWithPermit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stakePoolABI,
    'depositStEthWithPermit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"withdrawEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function usePrepareStakePoolWithdrawEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakePoolABI, 'withdrawEth'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'withdrawEth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakePoolABI, 'withdrawEth'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stakePoolABI}__ and `functionName` set to `"withdrawStEth"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function usePrepareStakePoolWithdrawStEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stakePoolABI, 'withdrawStEth'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    functionName: 'withdrawStEth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stakePoolABI, 'withdrawStEth'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakePoolABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof stakePoolABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    ...config,
  } as UseContractEventConfig<typeof stakePoolABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakePoolABI}__ and `eventName` set to `"MintAndStakeDeposited"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolMintAndStakeDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakePoolABI, 'MintAndStakeDeposited'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    eventName: 'MintAndStakeDeposited',
    ...config,
  } as UseContractEventConfig<typeof stakePoolABI, 'MintAndStakeDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakePoolABI}__ and `eventName` set to `"StakeDeposited"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolStakeDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof stakePoolABI, 'StakeDeposited'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    eventName: 'StakeDeposited',
    ...config,
  } as UseContractEventConfig<typeof stakePoolABI, 'StakeDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakePoolABI}__ and `eventName` set to `"StakeDepositedWithPermit"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolStakeDepositedWithPermitEvent(
  config: Omit<
    UseContractEventConfig<typeof stakePoolABI, 'StakeDepositedWithPermit'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    eventName: 'StakeDepositedWithPermit',
    ...config,
  } as UseContractEventConfig<typeof stakePoolABI, 'StakeDepositedWithPermit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stakePoolABI}__ and `eventName` set to `"StakeWithdrawn"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0xf53C6016781F3F3ec9E40495CC21Ad0E1608292D)
 */
export function useStakePoolStakeWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof stakePoolABI, 'StakeWithdrawn'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof stakePoolAddress } = {} as any,
) {
  return useContractEvent({
    abi: stakePoolABI,
    address: stakePoolAddress[5],
    eventName: 'StakeWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof stakePoolABI, 'StakeWithdrawn'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vrfConsumerBaseV2ABI}__.
 */
export function useVrfConsumerBaseV2Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vrfConsumerBaseV2ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof vrfConsumerBaseV2ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof vrfConsumerBaseV2ABI, TFunctionName, TMode>({
    abi: vrfConsumerBaseV2ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vrfConsumerBaseV2ABI}__ and `functionName` set to `"rawFulfillRandomWords"`.
 */
export function useVrfConsumerBaseV2RawFulfillRandomWords<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vrfConsumerBaseV2ABI,
          'rawFulfillRandomWords'
        >['request']['abi'],
        'rawFulfillRandomWords',
        TMode
      > & { functionName?: 'rawFulfillRandomWords' }
    : UseContractWriteConfig<
        typeof vrfConsumerBaseV2ABI,
        'rawFulfillRandomWords',
        TMode
      > & {
        abi?: never
        functionName?: 'rawFulfillRandomWords'
      } = {} as any,
) {
  return useContractWrite<
    typeof vrfConsumerBaseV2ABI,
    'rawFulfillRandomWords',
    TMode
  >({
    abi: vrfConsumerBaseV2ABI,
    functionName: 'rawFulfillRandomWords',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vrfConsumerBaseV2ABI}__.
 */
export function usePrepareVrfConsumerBaseV2Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vrfConsumerBaseV2ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vrfConsumerBaseV2ABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vrfConsumerBaseV2ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vrfConsumerBaseV2ABI}__ and `functionName` set to `"rawFulfillRandomWords"`.
 */
export function usePrepareVrfConsumerBaseV2RawFulfillRandomWords(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vrfConsumerBaseV2ABI,
      'rawFulfillRandomWords'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vrfConsumerBaseV2ABI,
    functionName: 'rawFulfillRandomWords',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vrfConsumerBaseV2ABI,
    'rawFulfillRandomWords'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__.
 */
export function useVrfCoordinatorV2InterfaceRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof vrfCoordinatorV2InterfaceABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: vrfCoordinatorV2InterfaceABI,
    ...config,
  } as UseContractReadConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"getRequestConfig"`.
 */
export function useVrfCoordinatorV2InterfaceGetRequestConfig<
  TFunctionName extends 'getRequestConfig',
  TSelectData = ReadContractResult<
    typeof vrfCoordinatorV2InterfaceABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'getRequestConfig',
    ...config,
  } as UseContractReadConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"getSubscription"`.
 */
export function useVrfCoordinatorV2InterfaceGetSubscription<
  TFunctionName extends 'getSubscription',
  TSelectData = ReadContractResult<
    typeof vrfCoordinatorV2InterfaceABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'getSubscription',
    ...config,
  } as UseContractReadConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"pendingRequestExists"`.
 */
export function useVrfCoordinatorV2InterfacePendingRequestExists<
  TFunctionName extends 'pendingRequestExists',
  TSelectData = ReadContractResult<
    typeof vrfCoordinatorV2InterfaceABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'pendingRequestExists',
    ...config,
  } as UseContractReadConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__.
 */
export function useVrfCoordinatorV2InterfaceWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vrfCoordinatorV2InterfaceABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof vrfCoordinatorV2InterfaceABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof vrfCoordinatorV2InterfaceABI,
    TFunctionName,
    TMode
  >({ abi: vrfCoordinatorV2InterfaceABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"acceptSubscriptionOwnerTransfer"`.
 */
export function useVrfCoordinatorV2InterfaceAcceptSubscriptionOwnerTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vrfCoordinatorV2InterfaceABI,
          'acceptSubscriptionOwnerTransfer'
        >['request']['abi'],
        'acceptSubscriptionOwnerTransfer',
        TMode
      > & { functionName?: 'acceptSubscriptionOwnerTransfer' }
    : UseContractWriteConfig<
        typeof vrfCoordinatorV2InterfaceABI,
        'acceptSubscriptionOwnerTransfer',
        TMode
      > & {
        abi?: never
        functionName?: 'acceptSubscriptionOwnerTransfer'
      } = {} as any,
) {
  return useContractWrite<
    typeof vrfCoordinatorV2InterfaceABI,
    'acceptSubscriptionOwnerTransfer',
    TMode
  >({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'acceptSubscriptionOwnerTransfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"addConsumer"`.
 */
export function useVrfCoordinatorV2InterfaceAddConsumer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vrfCoordinatorV2InterfaceABI,
          'addConsumer'
        >['request']['abi'],
        'addConsumer',
        TMode
      > & { functionName?: 'addConsumer' }
    : UseContractWriteConfig<
        typeof vrfCoordinatorV2InterfaceABI,
        'addConsumer',
        TMode
      > & {
        abi?: never
        functionName?: 'addConsumer'
      } = {} as any,
) {
  return useContractWrite<
    typeof vrfCoordinatorV2InterfaceABI,
    'addConsumer',
    TMode
  >({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'addConsumer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"cancelSubscription"`.
 */
export function useVrfCoordinatorV2InterfaceCancelSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vrfCoordinatorV2InterfaceABI,
          'cancelSubscription'
        >['request']['abi'],
        'cancelSubscription',
        TMode
      > & { functionName?: 'cancelSubscription' }
    : UseContractWriteConfig<
        typeof vrfCoordinatorV2InterfaceABI,
        'cancelSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'cancelSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof vrfCoordinatorV2InterfaceABI,
    'cancelSubscription',
    TMode
  >({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'cancelSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"createSubscription"`.
 */
export function useVrfCoordinatorV2InterfaceCreateSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vrfCoordinatorV2InterfaceABI,
          'createSubscription'
        >['request']['abi'],
        'createSubscription',
        TMode
      > & { functionName?: 'createSubscription' }
    : UseContractWriteConfig<
        typeof vrfCoordinatorV2InterfaceABI,
        'createSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'createSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof vrfCoordinatorV2InterfaceABI,
    'createSubscription',
    TMode
  >({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'createSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"removeConsumer"`.
 */
export function useVrfCoordinatorV2InterfaceRemoveConsumer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vrfCoordinatorV2InterfaceABI,
          'removeConsumer'
        >['request']['abi'],
        'removeConsumer',
        TMode
      > & { functionName?: 'removeConsumer' }
    : UseContractWriteConfig<
        typeof vrfCoordinatorV2InterfaceABI,
        'removeConsumer',
        TMode
      > & {
        abi?: never
        functionName?: 'removeConsumer'
      } = {} as any,
) {
  return useContractWrite<
    typeof vrfCoordinatorV2InterfaceABI,
    'removeConsumer',
    TMode
  >({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'removeConsumer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"requestRandomWords"`.
 */
export function useVrfCoordinatorV2InterfaceRequestRandomWords<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vrfCoordinatorV2InterfaceABI,
          'requestRandomWords'
        >['request']['abi'],
        'requestRandomWords',
        TMode
      > & { functionName?: 'requestRandomWords' }
    : UseContractWriteConfig<
        typeof vrfCoordinatorV2InterfaceABI,
        'requestRandomWords',
        TMode
      > & {
        abi?: never
        functionName?: 'requestRandomWords'
      } = {} as any,
) {
  return useContractWrite<
    typeof vrfCoordinatorV2InterfaceABI,
    'requestRandomWords',
    TMode
  >({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'requestRandomWords',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"requestSubscriptionOwnerTransfer"`.
 */
export function useVrfCoordinatorV2InterfaceRequestSubscriptionOwnerTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vrfCoordinatorV2InterfaceABI,
          'requestSubscriptionOwnerTransfer'
        >['request']['abi'],
        'requestSubscriptionOwnerTransfer',
        TMode
      > & { functionName?: 'requestSubscriptionOwnerTransfer' }
    : UseContractWriteConfig<
        typeof vrfCoordinatorV2InterfaceABI,
        'requestSubscriptionOwnerTransfer',
        TMode
      > & {
        abi?: never
        functionName?: 'requestSubscriptionOwnerTransfer'
      } = {} as any,
) {
  return useContractWrite<
    typeof vrfCoordinatorV2InterfaceABI,
    'requestSubscriptionOwnerTransfer',
    TMode
  >({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'requestSubscriptionOwnerTransfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__.
 */
export function usePrepareVrfCoordinatorV2InterfaceWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vrfCoordinatorV2InterfaceABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"acceptSubscriptionOwnerTransfer"`.
 */
export function usePrepareVrfCoordinatorV2InterfaceAcceptSubscriptionOwnerTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      'acceptSubscriptionOwnerTransfer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'acceptSubscriptionOwnerTransfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    'acceptSubscriptionOwnerTransfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"addConsumer"`.
 */
export function usePrepareVrfCoordinatorV2InterfaceAddConsumer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      'addConsumer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'addConsumer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    'addConsumer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"cancelSubscription"`.
 */
export function usePrepareVrfCoordinatorV2InterfaceCancelSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      'cancelSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'cancelSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    'cancelSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"createSubscription"`.
 */
export function usePrepareVrfCoordinatorV2InterfaceCreateSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      'createSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'createSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    'createSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"removeConsumer"`.
 */
export function usePrepareVrfCoordinatorV2InterfaceRemoveConsumer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      'removeConsumer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'removeConsumer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    'removeConsumer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"requestRandomWords"`.
 */
export function usePrepareVrfCoordinatorV2InterfaceRequestRandomWords(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      'requestRandomWords'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'requestRandomWords',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    'requestRandomWords'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vrfCoordinatorV2InterfaceABI}__ and `functionName` set to `"requestSubscriptionOwnerTransfer"`.
 */
export function usePrepareVrfCoordinatorV2InterfaceRequestSubscriptionOwnerTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof vrfCoordinatorV2InterfaceABI,
      'requestSubscriptionOwnerTransfer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vrfCoordinatorV2InterfaceABI,
    functionName: 'requestSubscriptionOwnerTransfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vrfCoordinatorV2InterfaceABI,
    'requestSubscriptionOwnerTransfer'
  >)
}
